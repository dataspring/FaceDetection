@model MemberDetails
@using Memom.Entities.Models;
@{
    ViewBag.Title = "View Member";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<ul class="inline-list">
    <li><h2>View a Member</h2></li>
</ul>


<div class="row">
    <div class="small-12 medium-8 medium-centered large-6 large-centered columns">

        <ul class="tabs" data-tab id="manageFace">
            <li class="tab-title active">
                <a href="#panel1">
                    <span class="show-for-small-down hidden-for-medium-up">View Member</span>
                    <span class="show-for-medium-up hidden-for-small-down">View Member Details</span>
                </a>
            </li>
            <li class="tab-title">
                <a href="#panel2">
                    <span class="show-for-small-down hidden-for-medium-up">Manage Face</span>
                    <span class="show-for-medium-up hidden-for-small-down">Manage Face Image</span>
                </a>
            </li>
        </ul>
        <div class="tabs-content">
            <!--View Details content goes here -->
            <div class="content active" id="panel1">
                @if (Model == null)
                {
                    <div class="alert card">
                        <img src="~/Content/images/ID-Wrong.png" />
                        <div class="card-divider">
                            Can't retrieve member details!
                        </div>
                        <div class="card-section">
                            <h4>This member is not part of your member group or you are trying to access some other member or this member info is unavailable now</h4>
                        </div>
                    </div>
                }
                else
                {
                    bool faceDetected = Model.IsFaceDetected ?? false;
                    string srcString;
                    if (faceDetected)
                    {
                        srcString = Model.FolderPath + Model.FaceImage;
                    }
                    else
                    {
                        srcString = "~/UserContent/Member/GirlTagFace2.png";
                    }

                    <ul class="mem-grid show-for-medium-up" style="margin-left:0px">
                        <li>
                            <div class="th" style="background-image:url(@(Model.FolderPath + Model.DetectedFaceImage));">
                                <span class="badge right"><img src="@(@srcString)" /></span>
                            </div>
                        </li>
                    </ul>


                    <div class="success card">
                        <img class="show-for-small-down" src="@(srcString)" />
                        <div class="card-divider">
                            Family Member: @Model.DisplayName
                        </div>
                        <div class="card-section">
                            <h6>@Model.Relation</h6>
                            <h6>@Html.ValueFor(modelItem => Model.DateOfBirth, "{0:dd MMM yyyy}")</h6>
                            <h6>Total Photos Tagged : @Model.TotalFaceTags</h6>
                            <h6>In @Model.AlbumTags Albums this person tagged</h6>
                            <h6>Now @Model.Age years old!</h6>
                        </div>
                    </div>
                }

                <div class="mem-pad-top-bot-10"></div>
                <div class=" show-for-medium-only">
                    <div class="row">
                        <div class="medium-12 columns medium-centered large-12 columns large-centered">
                            <ul class="inline-list">
                                <li><a href="/userapp/member" class="button medium">Back</a></li>
                                <li><a href="/useraccount/home" class="button medium">Dashboard</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class=" show-for-large-up">
                    <div class="row">
                        <div class="medium-12 columns medium-centered large-12 columns large-centered">
                            <ul class="inline-list">
                                <li><a href="/userapp/member" class="button large">Back</a></li>
                                <li><a href="/useraccount/home" class="button large">Dashboard</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!--Manage Face content goes here -->
            <div class="content" id="panel2">
                <h6>Assign a Face to Member</h6>
                <div class="">
                    @if (@Model == null)
                    {
                        <div class="alert card">
                            <img src="~/Content/images/ID-Wrong.png" />
                            <div class="card-divider">
                                Can't retrieve member details!
                            </div>
                            <div class="card-section">
                                <h4>This member is not part of your member group or you are trying to access some other member or this member info is unavailable now</h4>
                            </div>
                        </div>
                    }
                    else
                    {

                        if (@Model.IsFaceTagged)
                        {
                            if (@Model.DetectedFaceCount > 0 && !string.IsNullOrEmpty(@Model.AllDetectedFaceImages))
                            {
                                string[] faces = @Model.AllDetectedFaceImages.Split(',');
                                int i = 1;
                                <div class="mem-pad-top-bot-10">
                                    <ul class="small-block-grid-2 medium-block-grid-3 large-block-grid-4 mem-grid">
                                        <li>
                                            Current Assigned Face  :
                                        </li>
                                        <li>
                                            @foreach (string s in faces)
                                        {
                                        <img class="@(Model.FaceImage == s ? "showing" : "hide" )" src="@(Model.FolderPath + s)" id="img-@i" />
                                            i++;
                                        }
                                        </li>
                                    </ul>
                                </div>
                            }

                        }
                        else
                        {
                            <div class="card-section">
                                <h4>No face detected from previous face image upload</h4>
                            </div>
                        }

                        if (@Model.DetectedFaceCount > 0 && !string.IsNullOrEmpty(@Model.AllDetectedFaceImages))
                        {
                            string[] faces = @Model.AllDetectedFaceImages.Split(',');
                            int i = 1;
                            <div class="mem-pad-top-bot-10">
                                <ul class=" small-block-grid-2 medium-block-grid-3 large-block-grid-4 mem-grid">
                                    @foreach (string s in faces)
                                    {
                                        <li class="member switch  @(Model.FaceImage == s ? "member-active" : "")" id="@s" data-image="#img-@i" data-imagefile="@s">
                                            <img class="" src="@(Model.FolderPath + s)" />
                                        </li>
                                        i++;
                                    }
                                </ul>
                            </div>

                        <!--action="/api/UpdateFaceForMember" method="post" id="myform" enctype="application/x-www-form-urlencoded"-->
                            <form>
                                @Html.AntiForgeryToken()
                                <input type="hidden" id="FaceUpdateMemberId" name="MemberId" value="@Model.Key" />
                                <input type="hidden" id="FaceUpdateFaceImage" name="FaceImage" value="@Model.FaceImage" />
                                <div><p id="UpdateFaceForMemberResult"></p></div>
                                <button type="button" class="medium" id="UpdateFaceButton">Update Face</button>
                            </form>
                        }


                    }
                </div>
                <h6>Replace Member Photo</h6>
                <hr />
                <div class="">
                    
                    <form action="/api/UploadReplacementPhoto" method="post" enctype="multipart/form-data" class="dropzone" id="my-awesome-dropzone">
                        @Html.AntiForgeryToken()
                            
                            <div class="dropzone-previews"></div> <!-- this is were the previews should be shown. -->
                            <div class="fallback">
                                <input name="file" type="file" multiple />
                            </div>
                            <input type="hidden" id="FaceUpdateMemberId" name="MemberId" value="@Model.Key" />
                            <div>
                                <p id="AddFormMsg"></p>
                            </div>
                            <div>
                                <button type="submit" class="medium hide" id="FormSubmitReplace">Add</button>
                            </div>
                            <div>
                                <ul class="small-block-grid-2">
                                    <li><button class="expand small fileinput-button dz-clickable" type="button">Append Photo</button></li>
                                    <li><button class="expand small start" id="UploadReplacementPhotoButt" type="button">Upload Replacement</button></li>
                                </ul>
                            </div>
                            <div>
                                <p id="AddFormMsg"></p>
                            </div>
                    </form>
                </div>
            </div>
        </div>



    </div>
</div>





@section scripts {
    <script src="~/Scripts/dropzone.js"></script>
    <script type="text/javascript">
        $(document).ready(function ($) {

            //---------height adjustment for images--------------------
            function reHeight() {
                $(".mem-grid > li").each(function () {
                    //var width = $(this).width();
                    //var height = $(this).height();
                    $(this).height($(this).width() * 0.65);
                });
            }
            reHeight();
            $(window).resize(reHeight);
            $('#manageFace').on('toggled', function (event, tab) {
                reHeight();
            });

            //-------------------- toggle for image selection --------------------
            $("li.switch").click(function () {
                var liActive = $("li.member-active");
                var imgActive = liActive.data("image");
                $(imgActive).removeClass("showing").addClass("hide");
                $(liActive).removeClass("member-active");

                //currently clicked li
                var $this = $(this);
                $this.addClass("member-active");
                var d = $this.data("image");
                $('#FaceUpdateFaceImage').val($this.data("imagefile"));
                $(d).removeClass("hide").addClass("showing");
            });
            
            // -------------------- Update for new face selection ----------------------------
            $("#UpdateFaceButton").click(function () {
                $.ajax('/api/UpdateFaceForMember', {
                    method: 'POST',
                    data: {
                        MemberId: $('#FaceUpdateMemberId').val(),
                        FaceImage: $('#FaceUpdateFaceImage').val()
                    }
                })
                .then(
                    function success(UpdateFaceForMember) {
                        $("#UpdateFaceForMemberResult").text(UpdateFaceForMember.ResultMsg).addClass("mem-color");
                    },

                    function fail(data, status) {
                        $("#UpdateFaceForMemberResult").text(status).addClass("mem-red");
                    }
                );

            });

            // -------------------- Upload replacement photo ---------------------------------
            function validateForm(dropZone) {
              if (dropZone.files.length == 0) {
                    $("#AddFormMsg").text('Please don\'t forget to drop a image for face detection below').addClass("mem-red");
                    return false;
                }
                $("#AddFormMsg").text('');
                return true;
            }

            Dropzone.options.myAwesomeDropzone = { // The camelized version of the ID of the form element
                // The configuration we've talked about above
                addRemoveLinks: true,
                autoProcessQueue: false,
                uploadMultiple: true,
                parallelUploads: 2,
                maxFiles: 1,
                maxFilesize: 10,
                acceptedFiles: 'image/*',
                dictDefaultMessage: "drop file zone ..",
                clickable: ".fileinput-button", // Define the element that should be used as click trigger to select files.


                // The setting up of the dropzone
                init: function () {
                    var displayMsg;
                    var myDropzone = this;
                    $("#AddFormMsg").empty();

                    // First change the button to actually tell Dropzone to process the queue.
                    
                    this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                        // Make sure that the form isn't actually being sent.
                        e.preventDefault();
                        e.stopPropagation();
                        if (validateForm(myDropzone))
                            myDropzone.processQueue();
                    });


                    $('#UploadReplacementPhotoButt').click(function (e) {
                        $('#FormSubmitReplace').click();
                    });

                    // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                    // of the sending event because uploadMultiple is set to true.
                    this.on("sendingmultiple", function () {
                        // Gets triggered when the form is actually being sent.
                        // Hide the success button or the complete form.
                        //alert('Starting send');
                        $("#AddFormMsg").text('starting upload...').addClass("mem-color");
                    });
                    this.on("successmultiple", function (files, response) {
                        // Gets triggered when the files have successfully been sent.
                        // Redirect user or notify of success.
                        //alert(JSON.stringify(response));
                        if (response.IsAddOk) {
                            displayMsg = 'File Uploaded successfully on ' + response.UpdatedTimestamp;
                            if (response.IsFaceDetectionOk) {
                                displayMsg += ' Faces Detected : ' + response.FacesDetected;
                                displayMsg += '\r\n Remarks : ' + response.ErrorMsg;
                                displayMsg += '\r\n  redirecting to edit member page for further changes and viewing';
                            }
                            else {
                                displayMsg += ' Error in Face Detection : ' + response.ErrorMsg;
                                displayMsg += '\r\n redirecting to edit member page to retag a new face';
                            }

                            $("#AddFormMsg").text(displayMsg).addClass("mem-color");

                            setTimeout(function () {
                                window.location.href = "/userapp/member/viewstatus?memberid=" + response.MemberId;
                            }, 2500);


                            //delay a bit

                            //redirect
                        }
                        else {
                            displayMsg = 'Error encountered : ' + response.UpdatedTimestamp + '\r\n' + response.ErrorMsg;
                            displayMsg += '\r\n refresh the page and redo';
                            $("#AddFormMsg").text(displayMsg).addClass("mem-red");
                        }


                    });
                    this.on("errormultiple", function (files, response) {
                        // Gets triggered when there was an error sending the files.
                        // Maybe show form again, and notify user of error
                        $("#AddFormMsg").text('Error encountered : ' + xhr.ErrorMsg + '\r\n' + response.ErrorMsg);
                    });
                }

            }


        });
    </script>
}